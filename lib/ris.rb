# Autogenerated from a Treetop grammar. Edits may be lost.


module RIS
  include Treetop::Runtime

  def root
    @root ||= :document
  end

  module Document0
		def content(basename = nil)
	    elements.map do |e|
	      e.content(basename)
	    end
	  end
  end

  def _nt_document
    start_index = index
    if node_cache[:document].has_key?(index)
      cached = node_cache[:document][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_citations
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    r0.extend(Document0)

    node_cache[:document][start_index] = r0

    r0
  end

  module Citations0
    def type
      elements[0]
    end

    def tags
      elements[1]
    end

    def er
      elements[2]
    end
  end

  module Citations1
		def content(basename=nil, h=Citation.new) 
			    elements.map do |e| 
		 				e.content(basename, h)
			    end.compact
			  end
  end

  def _nt_citations
    start_index = index
    if node_cache[:citations].has_key?(index)
      cached = node_cache[:citations][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type
    s0 << r1
    if r1
      r2 = _nt_tags
      s0 << r2
      if r2
        r3 = _nt_er
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Citations0)
      r0.extend(Citations1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:citations][start_index] = r0

    r0
  end

  module Type0
    def text
      elements[1]
    end
  end

  module Type1
			def content(basename, h)
				type = extract_value(text_value).chomp			
    case type
    when 'JOUR'    then h.type = 'ArticleCitation'
    when 'BOOK'    then h.type = 'BookCitation'
    when 'THES'    then h.type = 'ThesisCitation'
    when 'RPRT'    then h.type = 'ReportCitation'
    when 'CONF'    then h.type = 'ConferenceCitation'
    when 'CHAP'    then h.type = 'ChapterCitation'
    when 'EBOOK'   then h.type = 'EbookCitation'
    end
				nil # return nil because we are not interested in the  citation type record
			end
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('TY  - ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('TY  - ')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_text
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Type0)
      r0.extend(Type1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type][start_index] = r0

    r0
  end

  module Er0
    def line_ends
      elements[1]
    end
  end

  def _nt_er
    start_index = index
    if node_cache[:er].has_key?(index)
      cached = node_cache[:er][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ER  - ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('ER  - ')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_line_ends
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(NullNode,input, i0...index, s0)
      r0.extend(Er0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:er][start_index] = r0

    r0
  end

  module Text0
    def word_characters
      elements[1]
    end

    def line_ends
      elements[2]
    end
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2 = index
    r3 = _nt_line_end
    if r3
      r2 = r3
    else
      r4 = _nt_tag
      if r4
        r2 = r4
      else
        r5 = _nt_er
        if r5
          r2 = r5
        else
          r6 = _nt_type
          if r6
            r2 = r6
          else
            @index = i2
            r2 = nil
          end
        end
      end
    end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r7 = _nt_word_characters
      s0 << r7
      if r7
        r8 = _nt_line_ends
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Text0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:text][start_index] = r0

    r0
  end

  module WordCharacter0
  end

  def _nt_word_character
    start_index = index
    if node_cache[:word_character].has_key?(index)
      cached = node_cache[:word_character][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_line_end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(WordCharacter0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:word_character][start_index] = r0

    r0
  end

  def _nt_word_characters
    start_index = index
    if node_cache[:word_characters].has_key?(index)
      cached = node_cache[:word_characters][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_word_character
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:word_characters][start_index] = r0

    r0
  end

  def _nt_text_lines
    start_index = index
    if node_cache[:text_lines].has_key?(index)
      cached = node_cache[:text_lines][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_text
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:text_lines][start_index] = r0

    r0
  end

  def _nt_tags
    start_index = index
    if node_cache[:tags].has_key?(index)
      cached = node_cache[:tags][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_tag
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(ParentNode,input, i0...index, s0)
    end

    node_cache[:tags][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(' ', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(' ')
      r0 = nil
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_dash
    start_index = index
    if node_cache[:dash].has_key?(index)
      cached = node_cache[:dash][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('-', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r0 = nil
    end

    node_cache[:dash][start_index] = r0

    r0
  end

  def _nt_line_ends
    start_index = index
    if node_cache[:line_ends].has_key?(index)
      cached = node_cache[:line_ends][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_line_end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:line_ends][start_index] = r0

    r0
  end

  def _nt_line_end
    start_index = index
    if node_cache[:line_end].has_key?(index)
      cached = node_cache[:line_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("\r\n", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("\r\n")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:line_end][start_index] = r0

    r0
  end

  def _nt_tag
    start_index = index
    if node_cache[:tag].has_key?(index)
      cached = node_cache[:tag][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_url
    if r1
      r0 = r1
    else
      r2 = _nt_abstract
      if r2
        r0 = r2
      else
        r3 = _nt_author
        if r3
          r0 = r3
        else
          r4 = _nt_keyword
          if r4
            r0 = r4
          else
            r5 = _nt_pdf
            if r5
              r0 = r5
            else
              r6 = _nt_title
              if r6
                r0 = r6
              else
                r7 = _nt_id
                if r7
                  r0 = r7
                else
                  r8 = _nt_year
                  if r8
                    r0 = r8
                  else
                    r9 = _nt_publication
                    if r9
                      r0 = r9
                    else
                      r10 = _nt_label
                      if r10
                        r0 = r10
                      else
                        r11 = _nt_rn
                        if r11
                          r0 = r11
                        else
                          r12 = _nt_doi
                          if r12
                            r0 = r12
                          else
                            r13 = _nt_language
                            if r13
                              r0 = r13
                            else
                              r14 = _nt_volume
                              if r14
                                r0 = r14
                              else
                                r15 = _nt_issue
                                if r15
                                  r0 = r15
                                else
                                  r16 = _nt_sp
                                  if r16
                                    r0 = r16
                                  else
                                    r17 = _nt_ep
                                    if r17
                                      r0 = r17
                                    else
                                      r18 = _nt_sn
                                      if r18
                                        r0 = r18
                                      else
                                        r19 = _nt_publisher
                                        if r19
                                          r0 = r19
                                        else
                                          r20 = _nt_note
                                          if r20
                                            r0 = r20
                                          else
                                            r21 = _nt_dp
                                            if r21
                                              r0 = r21
                                            else
                                              r22 = _nt_address
                                              if r22
                                                r0 = r22
                                              else
                                                r23 = _nt_an
                                                if r23
                                                  r0 = r23
                                                else
                                                  r24 = _nt_da
                                                  if r24
                                                    r0 = r24
                                                  else
                                                    r25 = _nt_et
                                                    if r25
                                                      r0 = r25
                                                    else
                                                      r26 = _nt_city
                                                      if r26
                                                        r0 = r26
                                                      else
                                                        r27 = _nt_unknown
                                                        if r27
                                                          r0 = r27
                                                        else
                                                          @index = i0
                                                          r0 = nil
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:tag][start_index] = r0

    r0
  end

  module TagSpace0
    def space1
      elements[0]
    end

    def space2
      elements[1]
    end

    def dash
      elements[2]
    end

    def space3
      elements[3]
    end
  end

  def _nt_tag_space
    start_index = index
    if node_cache[:tag_space].has_key?(index)
      cached = node_cache[:tag_space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_space
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_dash
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TagSpace0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tag_space][start_index] = r0

    r0
  end

  module Url0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Url1
			def content(basename, h)
				h.publisher_url = extract_value(text_value).chomp
			end
  end

  def _nt_url
    start_index = index
    if node_cache[:url].has_key?(index)
      cached = node_cache[:url][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('UR', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('UR')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Url0)
      r0.extend(Url1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:url][start_index] = r0

    r0
  end

  module Abstract0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Abstract1
			def content(basename, h)
				h.abstract = extract_value(text_value).gsub("\r\n",' ').gsub("\n",' ')
			end
  end

  def _nt_abstract
    start_index = index
    if node_cache[:abstract].has_key?(index)
      cached = node_cache[:abstract][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('AB', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('AB')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Abstract0)
      r0.extend(Abstract1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:abstract][start_index] = r0

    r0
  end

  module Author0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Author1
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Author2
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Author3
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_author
    start_index = index
    if node_cache[:author].has_key?(index)
      cached = node_cache[:author][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('AU', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('AU')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_tag_space
      s1 << r3
      if r3
        r4 = _nt_text_lines
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(AuthorNode,input, i1...index, s1)
      r1.extend(Author0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?('A1', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('A1')
        r6 = nil
      end
      s5 << r6
      if r6
        r7 = _nt_tag_space
        s5 << r7
        if r7
          r8 = _nt_text_lines
          s5 << r8
        end
      end
      if s5.last
        r5 = instantiate_node(AuthorNode,input, i5...index, s5)
        r5.extend(Author1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        i9, s9 = index, []
        if has_terminal?('A2', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('A2')
          r10 = nil
        end
        s9 << r10
        if r10
          r11 = _nt_tag_space
          s9 << r11
          if r11
            r12 = _nt_text_lines
            s9 << r12
          end
        end
        if s9.last
          r9 = instantiate_node(AuthorNode,input, i9...index, s9)
          r9.extend(Author2)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          i13, s13 = index, []
          if has_terminal?('A3', false, index)
            r14 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('A3')
            r14 = nil
          end
          s13 << r14
          if r14
            r15 = _nt_tag_space
            s13 << r15
            if r15
              r16 = _nt_text_lines
              s13 << r16
            end
          end
          if s13.last
            r13 = instantiate_node(AuthorNode,input, i13...index, s13)
            r13.extend(Author3)
          else
            @index = i13
            r13 = nil
          end
          if r13
            r0 = r13
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:author][start_index] = r0

    r0
  end

  module Keyword0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Keyword1
			def content(basename, h)
		    #h.keywords = extract_value(text_value)
		  end
  end

  def _nt_keyword
    start_index = index
    if node_cache[:keyword].has_key?(index)
      cached = node_cache[:keyword][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('KW', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('KW')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Keyword0)
      r0.extend(Keyword1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:keyword][start_index] = r0

    r0
  end

  module Pdf0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Pdf1
			def content(basename, h)
		    	file_name = extract_value(text_value)
		    	file_name.gsub!(/internal-pdf:\//,'')
					h.pdf = File.open(basename + file_name.to_s,'r')
		  end
  end

  def _nt_pdf
    start_index = index
    if node_cache[:pdf].has_key?(index)
      cached = node_cache[:pdf][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('L1', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('L1')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Pdf0)
      r0.extend(Pdf1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:pdf][start_index] = r0

    r0
  end

  module Title0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Title1
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Title2
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_title
    start_index = index
    if node_cache[:title].has_key?(index)
      cached = node_cache[:title][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('T1', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('T1')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_tag_space
      s1 << r3
      if r3
        r4 = _nt_text_lines
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(TitleNode,input, i1...index, s1)
      r1.extend(Title0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?('ST', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('ST')
        r6 = nil
      end
      s5 << r6
      if r6
        r7 = _nt_tag_space
        s5 << r7
        if r7
          r8 = _nt_text_lines
          s5 << r8
        end
      end
      if s5.last
        r5 = instantiate_node(TitleNode,input, i5...index, s5)
        r5.extend(Title1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        i9, s9 = index, []
        if has_terminal?('TI', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('TI')
          r10 = nil
        end
        s9 << r10
        if r10
          r11 = _nt_tag_space
          s9 << r11
          if r11
            r12 = _nt_text_lines
            s9 << r12
          end
        end
        if s9.last
          r9 = instantiate_node(TitleNode,input, i9...index, s9)
          r9.extend(Title2)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:title][start_index] = r0

    r0
  end

  module Year0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Year1
				def content(basename, h)
					h.pub_year = extract_value(text_value).to_i
				end
  end

  def _nt_year
    start_index = index
    if node_cache[:year].has_key?(index)
      cached = node_cache[:year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('PY', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('PY')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Year0)
      r0.extend(Year1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:year][start_index] = r0

    r0
  end

  module Id0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_id
    start_index = index
    if node_cache[:id].has_key?(index)
      cached = node_cache[:id][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ID', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('ID')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(NullNode,input, i0...index, s0)
      r0.extend(Id0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:id][start_index] = r0

    r0
  end

  module Publication0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Publication1
			def content(basename, h)
				h.publication = extract_value(text_value)
			end
  end

  def _nt_publication
    start_index = index
    if node_cache[:publication].has_key?(index)
      cached = node_cache[:publication][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('T2', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('T2')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Publication0)
      r0.extend(Publication1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:publication][start_index] = r0

    r0
  end

  module Label0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_label
    start_index = index
    if node_cache[:label].has_key?(index)
      cached = node_cache[:label][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('LB', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('LB')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(Label0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:label][start_index] = r0

    r0
  end

  module Rn0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_rn
    start_index = index
    if node_cache[:rn].has_key?(index)
      cached = node_cache[:rn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('RN', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('RN')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(Rn0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:rn][start_index] = r0

    r0
  end

  module Doi0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Doi1
			def content(basename, h)
		    h.doi = extract_value(text_value).gsub("\r\n",' ').gsub("\n",' ')
		  end
  end

  def _nt_doi
    start_index = index
    if node_cache[:doi].has_key?(index)
      cached = node_cache[:doi][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DO', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('DO')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Doi0)
      r0.extend(Doi1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:doi][start_index] = r0

    r0
  end

  module Language0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_language
    start_index = index
    if node_cache[:language].has_key?(index)
      cached = node_cache[:language][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('LA', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('LA')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(Language0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:language][start_index] = r0

    r0
  end

  module Volume0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Volume1
			def content(basename, h)
				h.volume = extract_value(text_value)
			end
  end

  def _nt_volume
    start_index = index
    if node_cache[:volume].has_key?(index)
      cached = node_cache[:volume][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('VL', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('VL')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Volume0)
      r0.extend(Volume1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:volume][start_index] = r0

    r0
  end

  module Issue0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Issue1
			def content(basename, h)
				h.issue = extract_value(text_value)
			end
  end

  def _nt_issue
    start_index = index
    if node_cache[:issue].has_key?(index)
      cached = node_cache[:issue][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('IS', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('IS')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Issue0)
      r0.extend(Issue1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:issue][start_index] = r0

    r0
  end

  module Sp0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Sp1
			def content(basename, h)
		    start_page, end_page = extract_value(text_value).split(/\-+/)
		    h.start_page_number = start_page
		    h.ending_page_number = end_page if end_page
		  end
  end

  def _nt_sp
    start_index = index
    if node_cache[:sp].has_key?(index)
      cached = node_cache[:sp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('SP', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('SP')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Sp0)
      r0.extend(Sp1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sp][start_index] = r0

    r0
  end

  module Ep0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Ep1
			def content(basename, h)
				h.ending_page_number = extract_value(text_value)
			end
  end

  def _nt_ep
    start_index = index
    if node_cache[:ep].has_key?(index)
      cached = node_cache[:ep][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('EP', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('EP')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Ep0)
      r0.extend(Ep1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ep][start_index] = r0

    r0
  end

  module Sn0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Sn1
			def content(basename, h)
				h.isbn = extract_value(text_value)
			end
  end

  def _nt_sn
    start_index = index
    if node_cache[:sn].has_key?(index)
      cached = node_cache[:sn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('SN', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('SN')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Sn0)
      r0.extend(Sn1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sn][start_index] = r0

    r0
  end

  module Publisher0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Publisher1
			def content(basename, h)
				h.publisher = extract_value(text_value)
			end
  end

  def _nt_publisher
    start_index = index
    if node_cache[:publisher].has_key?(index)
      cached = node_cache[:publisher][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('PB', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('PB')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Publisher0)
      r0.extend(Publisher1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:publisher][start_index] = r0

    r0
  end

  module Note0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Note1
			def content(basename, h)
				h.notes = extract_value(text_value)
			end
  end

  def _nt_note
    start_index = index
    if node_cache[:note].has_key?(index)
      cached = node_cache[:note][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('N1', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('N1')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Note0)
      r0.extend(Note1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:note][start_index] = r0

    r0
  end

  module Dp0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_dp
    start_index = index
    if node_cache[:dp].has_key?(index)
      cached = node_cache[:dp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DP', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('DP')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(Dp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dp][start_index] = r0

    r0
  end

  module Address0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module Address1
		def content(basename, h)
			h.address = extract_value(text_value)
		end
  end

  def _nt_address
    start_index = index
    if node_cache[:address].has_key?(index)
      cached = node_cache[:address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('AD', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('AD')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Address0)
      r0.extend(Address1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:address][start_index] = r0

    r0
  end

  module An0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_an
    start_index = index
    if node_cache[:an].has_key?(index)
      cached = node_cache[:an][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('AN', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('AN')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(An0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:an][start_index] = r0

    r0
  end

  module Da0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_da
    start_index = index
    if node_cache[:da].has_key?(index)
      cached = node_cache[:da][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DA', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('DA')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(Da0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:da][start_index] = r0

    r0
  end

  module Et0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  def _nt_et
    start_index = index
    if node_cache[:et].has_key?(index)
      cached = node_cache[:et][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ET', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('ET')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TextNode,input, i0...index, s0)
      r0.extend(Et0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:et][start_index] = r0

    r0
  end

  module City0
    def tag_space
      elements[1]
    end

    def text_lines
      elements[2]
    end
  end

  module City1
		def content(basename, h)
			h.city = extract_value(text_value)
		end
  end

  def _nt_city
    start_index = index
    if node_cache[:city].has_key?(index)
      cached = node_cache[:city][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CY', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('CY')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_space
      s0 << r2
      if r2
        r3 = _nt_text_lines
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(City0)
      r0.extend(City1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:city][start_index] = r0

    r0
  end

  module Unknown0
    def tag_space
      elements[2]
    end

    def text_lines
      elements[3]
    end
  end

  module Unknown1
			def content(basename, h)
				raise text_value
			end
  end

  def _nt_unknown
    start_index = index
    if node_cache[:unknown].has_key?(index)
      cached = node_cache[:unknown][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[A-Z]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_tag_space
        s0 << r3
        if r3
          r4 = _nt_text_lines
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Unknown0)
      r0.extend(Unknown1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unknown][start_index] = r0

    r0
  end

end

class RISParser < Treetop::Runtime::CompiledParser
  include RIS
end

